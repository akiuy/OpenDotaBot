#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ // Import libraries
import requests
import json
import os
import telebot
import datetime
from dotenv import load_dotenv


#–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å .env —Ñ–∞–π–ª–∞ // Getting token from .env file
load_dotenv()
bot=telebot.TeleBot(os.getenv("TOKEN"))

#–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π // Download files with additional information
with open('heroes.json', 'r') as heroes:
  heroid = json.load(heroes)

with open('countries.json', 'r') as countries:
  country = json.load(countries)

with open('dota2_ranks.json', 'r') as dota2_ranks:
  rank = json.load(dota2_ranks)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start // Processing /start command
@bot.message_handler(commands=['start'])
def start_message(message):
  bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç. OpenDotaBot - –±–æ—Ç —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ API –æ—Ç <a href="https://www.opendota.com/">OpenDota</a>\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏: /help',\
                    parse_mode='HTML', disable_web_page_preview=True) #–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–±–∏—Ä–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–∫–∏ // Using HTML to format a message and removing the link preview


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help // Processing /help command
@bot.message_handler(commands=['help'])
def help_message(message):
  bot.send_message(message.chat.id, '''/findmatch - –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –ø–æ –µ–≥–æ ID
/findplayer - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ –ø–æ –µ–≥–æ ID
/findaccount - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ –ø–æ –µ–≥–æ ID''')


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /findmatch // Processing /findmatch command
@bot.message_handler(commands=['findmatch'])
def get_match_id(message):
  match_id = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –º–∞—Ç—á–∞')
  bot.register_next_step_handler(match_id, get_match_data) #–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π // Waits for user response with information

def get_match_data(message):
  match_id = int(message.text) #–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é // Designating user information into a variable 
  try:
    resp = requests.get(f'https://api.opendota.com/api/matches/{match_id}') # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä opendota.com // Sending a request to the opendota.com server
    response = resp.json() # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ json-—Ñ–∞–π–ª–∞ // Collecting info in json-file format

    with open(f'{match_id}.json', 'w') as outfile:
      json.dump(response, outfile) #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Saving received json-file

    with open(f'{match_id}.json', 'r') as outfile:
      result = json.load(outfile) #–ß—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Reading received json-file

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ // Processing and saving match results into variables
    data_win = result["radiant_win"]
    data_duration = str(datetime.timedelta(seconds=result["duration"]))
    data_radiant_score = result["radiant_score"]
    data_dire_score = result["dire_score"]
    #–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö // Creating empty lists to save player information
    data_players_radiant = []
    data_players_dire = []


    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π // Processing information about players, saving to lists in the form of dictionaries
    for elem in result["players"]:
      if elem.get("team_number") == 0: #–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏–ª —Å–≤–µ—Ç–∞ // If the player is on the radiant side
        players_info = dict()
        players_info['hero'] = heroid[str(elem.get('hero_id'))]
        players_info['kills'] = elem.get("kills", None)
        players_info['deaths'] = elem.get("deaths", None)
        players_info['assists'] = elem.get("assists", None)
        data_players_radiant.append(players_info)
      elif elem.get("team_number") == 1: #–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏–ª —Ç—å–º—ã // If the player is on the dire side
        players_info = dict()
        players_info['hero'] = heroid[str(elem.get('hero_id'))]
        players_info['kills'] = elem.get("kills", None)
        players_info['deaths'] = elem.get("deaths", None)
        players_info['assists'] = elem.get("assists", None)
        data_players_dire.append(players_info)
      else:
        pass


    #–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ // Bot sending a message with information about a match
    if data_win: #–ü–æ–±–µ–¥–∞ —Å–∏–ª —Å–≤–µ—Ç–∞ // Radiant match-win 
      bot.send_message(message.chat.id, f'''üèÜ–°–∏–ª—ã —Å–≤–µ—Ç–∞ [{data_radiant_score}:{data_dire_score}] –°–∏–ª—ã —Ç—å–º—ã 
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data_duration}\n
üèÜ–°–∏–ª—ã —Å–≤–µ—Ç–∞:\n
{data_players_radiant[0].get('hero')} - [{data_players_radiant[0].get('kills')}/{data_players_radiant[0].get('deaths')}/{data_players_radiant[0].get('assists')}]
{data_players_radiant[1].get('hero')} - [{data_players_radiant[1].get('kills')}/{data_players_radiant[1].get('deaths')}/{data_players_radiant[1].get('assists')}]
{data_players_radiant[2].get('hero')} - [{data_players_radiant[2].get('kills')}/{data_players_radiant[2].get('deaths')}/{data_players_radiant[2].get('assists')}]
{data_players_radiant[3].get('hero')} - [{data_players_radiant[3].get('kills')}/{data_players_radiant[3].get('deaths')}/{data_players_radiant[3].get('assists')}]
{data_players_radiant[4].get('hero')} - [{data_players_radiant[4].get('kills')}/{data_players_radiant[4].get('deaths')}/{data_players_radiant[4].get('assists')}]

–°–∏–ª—ã —Ç—å–º—ã:\n
{data_players_dire[0].get('hero')} - [{data_players_dire[0].get('kills')}/{data_players_dire[0].get('deaths')}/{data_players_dire[0].get('assists')}]
{data_players_dire[1].get('hero')} - [{data_players_dire[1].get('kills')}/{data_players_dire[1].get('deaths')}/{data_players_dire[1].get('assists')}]
{data_players_dire[2].get('hero')} - [{data_players_dire[2].get('kills')}/{data_players_dire[2].get('deaths')}/{data_players_dire[2].get('assists')}]
{data_players_dire[3].get('hero')} - [{data_players_dire[3].get('kills')}/{data_players_dire[3].get('deaths')}/{data_players_dire[3].get('assists')}]
{data_players_dire[4].get('hero')} - [{data_players_dire[4].get('kills')}/{data_players_dire[4].get('deaths')}/{data_players_dire[4].get('assists')}]
''')
      
    else: ##–ü–æ–±–µ–¥–∞ —Å–∏–ª —Ç—å–º—ã // Dire match-win 
      bot.send_message(message.chat.id, f'''–°–∏–ª—ã —Å–≤–µ—Ç–∞ [{data_radiant_score}:{data_dire_score}] –°–∏–ª—ã —Ç—å–º—ãüèÜ
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data_duration}
–°–∏–ª—ã —Å–≤–µ—Ç–∞:\n
{data_players_radiant[0].get('hero')} - [{data_players_radiant[0].get('kills')}/{data_players_radiant[0].get('deaths')}/{data_players_radiant[0].get('assists')}]
{data_players_radiant[1].get('hero')} - [{data_players_radiant[1].get('kills')}/{data_players_radiant[1].get('deaths')}/{data_players_radiant[1].get('assists')}]
{data_players_radiant[2].get('hero')} - [{data_players_radiant[2].get('kills')}/{data_players_radiant[2].get('deaths')}/{data_players_radiant[2].get('assists')}]
{data_players_radiant[3].get('hero')} - [{data_players_radiant[3].get('kills')}/{data_players_radiant[3].get('deaths')}/{data_players_radiant[3].get('assists')}]
{data_players_radiant[4].get('hero')} - [{data_players_radiant[4].get('kills')}/{data_players_radiant[4].get('deaths')}/{data_players_radiant[4].get('assists')}]\n
üèÜ–°–∏–ª—ã —Ç—å–º—ã:\n
{data_players_dire[0].get('hero')} - [{data_players_dire[0].get('kills')}/{data_players_dire[0].get('deaths')}/{data_players_dire[0].get('assists')}]
{data_players_dire[1].get('hero')} - [{data_players_dire[1].get('kills')}/{data_players_dire[1].get('deaths')}/{data_players_dire[1].get('assists')}]
{data_players_dire[2].get('hero')} - [{data_players_dire[2].get('kills')}/{data_players_dire[2].get('deaths')}/{data_players_dire[2].get('assists')}]
{data_players_dire[3].get('hero')} - [{data_players_dire[3].get('kills')}/{data_players_dire[3].get('deaths')}/{data_players_dire[3].get('assists')}]
{data_players_dire[4].get('hero')} - [{data_players_dire[4].get('kills')}/{data_players_dire[4].get('deaths')}/{data_players_dire[4].get('assists')}]
''')
      
    os.remove(f'{match_id}.json') #–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Deleting a previously received json file

  except:
    pass


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /findplayer –∏ /findaccount // Handling the /findplayer and /findaccount commands
@bot.message_handler(commands=['findplayer', 'findaccount'])
def get_account_id(message):
  account_id = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –∏–≥—Ä–æ–∫–∞')
  bot.register_next_step_handler(account_id, get_account_data) #–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π // Waits for user response with information

def get_account_data(message):
  account_id = int(message.text) #–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é // Designating user information into a variable 
  try:
    resp = requests.get(f'https://api.opendota.com/api/players/{account_id}') #–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ opendota.com API // Sending a request to the opendota.com API
    response = resp.json()

    with open(f'{account_id}.json', 'w') as outfile:
      json.dump(response, outfile) #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Saving received json-file

    with open(f'{account_id}.json', 'r') as outfile:
      result = json.load(outfile) #–ß—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Reading received json-file

    
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ // Processing and storing information about the player into variables
    data_account_id = result['profile']['account_id']
    data_steamid = result['profile']['steamid']
    data_personaname = result['profile']['personaname']
    data_avatarfull = result['profile']['avatarfull']
    #–ü—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ None, —Ç.–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å –±—É–¥–µ–º –¥–∞–ª–µ–µ // We assign the value None, because we will fill it in later
    data_country = None
    data_country_emoji = None
    data_player_rank = None


    for elem in country["countries"]: #–°—á–∏—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å json —Ñ–∞–π–ª–∞ "countries" // Reading elements from the json file "countries"
      if result["profile"]["loccountrycode"] == elem["country_iso_alpha2"]: #–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ API —Å –Ω–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º // Compare the country code received by the API request with our list
        data_country = elem.get("country") #–ï—Å–ª–∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ –Ω–∞–∑–Ω–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é // If the country code matches, then assign the country name to the variable
      else:
        pass
  
    for elem in rank["ranks"]: #–î–µ–ª–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —Ç–µ–ø–µ—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ // We do the same thing, but now to gain rank
      if str(result["rank_tier"]) == elem["rank_id"]:
        data_player_rank = elem.get("rank_name")
      else:
        pass


    #–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º // The bot sends a message with the result
    if data_country == None: #–ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤ —Å—Ç–∏–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –æ—Ç–≤–µ—Ç // If the country is not on Steam, then we do not add it to the answer.
      bot.send_photo(message.chat.id, data_avatarfull, caption=f'''ID –∞–∫–∫–∞—É–Ω—Ç–∞: {data_account_id}\nSteam ID: {data_steamid}\n–ù–∏–∫–Ω–µ–π–º: {data_personaname}
–†–∞–Ω–≥: {data_player_rank}''')
    else:
      bot.send_photo(message.chat.id, data_avatarfull, caption=f'''ID –∞–∫–∫–∞—É–Ω—Ç–∞: {data_account_id}\nSteam ID: {data_steamid}\n–ù–∏–∫–Ω–µ–π–º: {data_personaname}
–°—Ç—Ä–∞–Ω–∞: {data_country}
–†–∞–Ω–≥: {data_player_rank}''')

    os.remove(f'{account_id}.json') #–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ json-—Ñ–∞–π–ª–∞ // Deleting a previously received json file

  except:
    pass


bot.infinity_polling()